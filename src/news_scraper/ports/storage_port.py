from datetime import datetime
from typing import Protocol

from ..domain import Article, ScrapingJob, Source


class ArticleRepositoryPort(Protocol):
    async def save_article(self, article: Article) -> str: ...

    async def get_article_by_id(self, article_id: str) -> Article | None: ...

    async def find_articles_by_tags(self, tags: list[str], limit: int = 50) -> list[Article]: ...

    async def find_articles_by_source(self, source_name: str, limit: int = 50) -> list[Article]: ...

    async def find_articles_by_date_range(
        self, start_date: datetime, end_date: datetime, limit: int = 50
    ) -> list[Article]: ...

    async def get_latest_articles(self, limit: int = 50) -> list[Article]: ...

    async def count_articles(self) -> int: ...

    async def article_exists(self, article_id: str) -> bool: ...


class JobRepositoryPort(Protocol):
    async def save_job(self, job: ScrapingJob) -> str: ...

    async def get_job_by_id(self, job_id: str) -> ScrapingJob | None: ...

    async def update_job(self, job: ScrapingJob) -> None: ...

    async def get_recent_jobs(self, limit: int = 20) -> list[ScrapingJob]: ...


class SourceRepositoryPort(Protocol):
    async def save_source(self, source: Source) -> str: ...

    async def get_source_by_name(self, name: str) -> Source | None: ...

    async def get_active_sources(self) -> list[Source]: ...

    async def update_source(self, source: Source) -> None: ...
